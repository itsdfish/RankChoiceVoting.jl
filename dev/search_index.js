var documenterSearchIndex = {"docs":
[{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"using RankChoiceVoting\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\nsystem = InstantRunOff()","category":"page"},{"location":"systems/instant_runoff/#Instant-Runoff","page":"Instant Runoff","title":"Instant Runoff","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"An instant runoff voting system iteratively eliminates the candidate with the minimum first preferences until one canidate reaches 50% first preferences.","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"using RankChoiceVoting\n\ndata = [[:a,:b,:c],[:a,:c,:b],[:c,:b,:a]]\ncounts = [2,1,1]\nrankings = Ranks(counts, data)\nsystem = InstantRunOff()","category":"page"},{"location":"systems/instant_runoff/#Example-Usage","page":"Instant Runoff","title":"Example Usage","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"The following examples illustrate some ways in which the instant_runoff system can be used in RankChoiceVoting.jl. To begin, let's generate some synthetic rank choice votes for candidates C = ckmn from 100 voters. ","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"using RankChoiceVoting \n\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"Next, let's create objects for the Consistency criterion and the instant_runoff voting system.","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"criterion = Consistency()\nsystem = InstantRunOff()","category":"page"},{"location":"systems/instant_runoff/#Compute-Ranking","page":"Instant Runoff","title":"Compute Ranking","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"The function compute_ranks is used to generate a complete rank ordering of candidates. In the case of ties, candidates will share the same rank value. ","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"compute_ranks(system, rankings)","category":"page"},{"location":"systems/instant_runoff/#Evaluate-Winner","page":"Instant Runoff","title":"Evaluate Winner","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"We can use the function evaluate_winner to return the winner of the election as a vector. If multiple candidates tie for winner, the vector will contain each winning candidate.","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"systems/instant_runoff/#Satisfies","page":"Instant Runoff","title":"Satisfies","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"The example below determines whether the a voting system is guaranteed to satisfy a given fairness criterion. ","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"satisfies(system, criterion)","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"It is also possible to check whether a system satisfies a given fairness criterion for a specific set of rank choice votes.","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"satisfies(system, criterion, rankings)","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"In the case above, the Borda system satisfies the consistency criterion because it holds in general. However, if a system does not satisify a criterion in general, it may satisfy the criterion in specific cases. ","category":"page"},{"location":"systems/instant_runoff/#Count-Violations","page":"Instant Runoff","title":"Count Violations","text":"","category":"section"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"The code block below shows how to use count_violations to determine the number of violations of a fairness criterion a given system produces for a specific set of rank choice votes.","category":"page"},{"location":"systems/instant_runoff/","page":"Instant Runoff","title":"Instant Runoff","text":"count_violations(system, criterion, rankings)","category":"page"},{"location":"systems/instant_runoff/#References","page":"Instant Runoff","title":"References","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"using RankChoiceVoting\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\nsystem = Minimax()","category":"page"},{"location":"systems/minimax/#Minimax","page":"Minimax","title":"Minimax","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"The minimax system selects the winner whose worst case scenario is the best amoung other candidates. There are different ways to measure the worst case scenario. In this package, the worst case scenario is measures using a margin of pairwise victories of candidate. Formally, let C = c_i_iin mathcalI be a set of n candidates, where mathcalI=1dotsn is the index set. The margin of voters prefering candidate i over candidate j is given by:","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"f(c_ic_j) = d(c_ic_j) - d(c_jc_i)","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"where d(ij) is the number of voters who prefer candidate i over candidate j. In the example below, the maximum margin of defeat is -222 for candidates a, b, and c, respectively. The best worst case scenario occurs for candidate a, whose score indicates a margin of victory of 2.  ","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"using RankChoiceVoting\nusing RankChoiceVoting: score_pairwise\n\ndata = [[:a,:b,:c],[:a,:c,:b],[:c,:b,:a]]\ncounts = [2,1,1]\nrankings = Ranks(counts, data)\nsystem = Minimax()\nx = score_pairwise(rankings, [:a,:b,:c])","category":"page"},{"location":"systems/minimax/#Example-Usage","page":"Minimax","title":"Example Usage","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"The following examples illustrate some ways in which the minimax system can be used in RankChoiceVoting.jl. To begin, let's generate some synthetic rank choice votes for candidates C = ckmn from 100 voters. ","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"using RankChoiceVoting \n\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"Next, let's create objects for the Consistency criterion and the Minimax voting system.","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"criterion = Consistency()\nsystem = Minimax()","category":"page"},{"location":"systems/minimax/#Compute-Ranking","page":"Minimax","title":"Compute Ranking","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"The function compute_ranks is used to generate a complete rank ordering of candidates. In the case of ties, candidates will share the same rank value. ","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"compute_ranks(system, rankings)","category":"page"},{"location":"systems/minimax/#Evaluate-Winner","page":"Minimax","title":"Evaluate Winner","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"We can use the function evaluate_winner to return the winner of the election as a vector. If multiple candidates tie for winner, the vector will contain each winning candidate.","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"systems/minimax/#Satisfies","page":"Minimax","title":"Satisfies","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"The example below determines whether the a voting system is guaranteed to satisfy a given fairness criterion. ","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"satisfies(system, criterion)","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"It is also possible to check whether a system satisfies a given fairness criterion for a specific set of rank choice votes.","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"satisfies(system, criterion, rankings)","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"In the case above, the Borda system satisfies the consistency criterion because it holds in general. However, if a system does not satisify a criterion in general, it may satisfy the criterion in specific cases. ","category":"page"},{"location":"systems/minimax/#Count-Violations","page":"Minimax","title":"Count Violations","text":"","category":"section"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"The code block below shows how to use count_violations to determine the number of violations of a fairness criterion a given system produces for a specific set of rank choice votes.","category":"page"},{"location":"systems/minimax/","page":"Minimax","title":"Minimax","text":"count_violations(system, criterion, rankings)","category":"page"},{"location":"systems/minimax/#References","page":"Minimax","title":"References","text":"","category":"section"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"using RankChoiceVoting\ndata = [[:a,:b,:c] for _ ∈ 1:4]\npush!(data, [[:b,:c,:a] for _ ∈ 1:3]...)\npush!(data, [[:c,:a,:b] for _ ∈ 1:2]...)\nrankings = Ranks(data)","category":"page"},{"location":"criteria/mutual_majority/#Mutual-Majority","page":"Mutual Majority","title":"Mutual Majority","text":"","category":"section"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"Suppose there is a set of candidates C = c_1dots c_m. According to the mutual majority criterion, a voting system must select a candidate from the smallest set B = b_1 dots b_k of the k leq m highest ranked candidates whose combined support exceeds 50%. In other words, at least 50% of voters prefer candidates in B to candidates in C setminus B and k is the smallest number to satisfy this condition. As an example, consider the following preference profile from 6 voters:","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"rankings = [\n    [:a, :b, :c, :d, :e],\n    [:b, :a, :c, :d, :e],\n    [:a, :b, :c, :e, :d],\n    [:b, :a, :c, :d, :e],\n    [:e, :b, :c, :d, :a],\n    [:d, :a, :c, :b, :e]\n]\nRanks(rankings)","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"The mutual majority set for the example above is ab because in the first four out of six rank orders, candidates a and b have the the highest rank orders, which exceeds 50% (i.e., frac46 approx 66).","category":"page"},{"location":"criteria/mutual_majority/#Usage","page":"Mutual Majority","title":"Usage","text":"","category":"section"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"The following example illustrates how to evaluate the Borda count voting system with respect to the mutual majority criterion. The code block below illustrates how to create a MutualMajority criterion object.","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"using RankChoiceVoting\ncriterion = MutualMajority()","category":"page"},{"location":"criteria/mutual_majority/#Satisfies","page":"Mutual Majority","title":"Satisfies","text":"","category":"section"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"We can see which systems are guaranteed to satisfy the mutual majority criterion by calling satisfies with the majority criterion object. ","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"satisfies(criterion)","category":"page"},{"location":"criteria/mutual_majority/#Example","page":"Mutual Majority","title":"Example","text":"","category":"section"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"Let's  check whether mutual majority is violated in a different example. In the code block below, we will define a preference profile of n=100 voters for m=4 candidates. ","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"data = [[:s,:t,:o,:p], [:t,:p,:o,:s],[:p,:t,:o,:s],[:o,:t,:p,:s]]\ncounts = [51,25,10,14]\n\nrankings = Ranks(counts, data)","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"Now, create an Borda count voting system object:","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"system = Borda()","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"In the code block below, we can determine the winner of the election with the function evaluate_winner as follows:","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"In the next code block, we will use the function satisifies to determine whether the Borda count system complies with the mutual majority criterion for the preference profile above.","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"criterion = MutualMajority()\nsatisfies(system, criterion, rankings)","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"which yields false for this example. To explore this result in more detail, we can use get_majority_set to list the candidates in the mutual majority set B. ","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"get_majority_set(rankings)","category":"page"},{"location":"criteria/mutual_majority/","page":"Mutual Majority","title":"Mutual Majority","text":"In this simple example, B = s, and the winning candidate t notin B.","category":"page"},{"location":"criteria/mutual_majority/#References","page":"Mutual Majority","title":"References","text":"","category":"section"},{"location":"criteria/majority/#Majority-Criterion","page":"Majority","title":"Majority Criterion","text":"","category":"section"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"The majority criterion requires a rank choice voting system to select a candidate who recieves more than 50% of first place ranks. ","category":"page"},{"location":"criteria/majority/#Usage","page":"Majority","title":"Usage","text":"","category":"section"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"using RankChoiceVoting\ncriterion = Majority()","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"The code block below illustrates how to create a Majority criterion object.","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"using RankChoiceVoting\ncriterion = Majority()","category":"page"},{"location":"criteria/majority/#Satisfies","page":"Majority","title":"Satisfies","text":"","category":"section"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"We can see which systems are guaranteed to satisfy the majority criterion by calling satisfies with the majority criterion object. ","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"satisfies(criterion)","category":"page"},{"location":"criteria/majority/#Example","page":"Majority","title":"Example","text":"","category":"section"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"In this example, we will demonstrate that the Borda count system can violate the majority criterion in some cases. The Borda count system simply scores a candidate as the inverse rank and selects the candidate with the highest score. Suppose 100 voters rank order four canidates denoted C = opst as follows:","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"ranks = [[:s,:t,:o,:p],[:t,:p,:o,:s],[:p,:t,:o,:s],[:o,:t,:p,:s]]\ncounts = [51,25,10,14]\nrankings = Ranks(counts, ranks)","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"The output above shows that canidate s recieved 51%. According to the majority criterion, a rank choice voting system should select candidate s. However, we can see that the Borda count violates the majority criterion in this case.","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"system = Borda()\ncriterion = Majority()\nsatisfies(system, criterion, rankings)","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"Rather than selecting candidate s, the code block below shows that candidate t is selected instead.","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"Note that the Borda count system can satisfy the majority criterion in some cases. For example, if t and s are switched in the second unique ranking above, the Borda count system will select the majority winner:","category":"page"},{"location":"criteria/majority/","page":"Majority","title":"Majority","text":"ranks = [[:s,:t,:o,:p],[:s,:p,:o,:t],[:p,:t,:o,:s],[:o,:t,:p,:s]]\ncounts = [51,25,10,14]\nrankings = Ranks(counts, ranks)\nsatisfies(system, criterion, rankings)","category":"page"},{"location":"criteria/majority/#References","page":"Majority","title":"References","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"using RankChoiceVoting\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\nsystem = Borda()","category":"page"},{"location":"systems/borda/#Borda-Count","page":"Borda","title":"Borda Count","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The Borda count system assigns a score to each vote according to the following rule:","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"s = n - r + 1","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"where s is the score, n is the number of candidates and r is the rank. Effectively, the score reverse codes the rank votes. The candidate with the highest Borda score is selected as the winner. As an example, consider the following:","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"count 1 2 3\n1 a b c\n2 c b a","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The Borda scores for each candidate are:","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"candidate score\na 4\nb 6\nc 6","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"which creates a tie between candidates b and c. ","category":"page"},{"location":"systems/borda/#Example-Usage","page":"Borda","title":"Example Usage","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The following examples illustrate some ways in which the Borda system can be used in RankChoiceVoting.jl. To begin, let's generate some synthetic rank choice votes for candidates C = ckmn from 100 voters. ","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"using RankChoiceVoting \n\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\nrankings = Ranks(data)","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"Next, let's create objects for the Consistency criterion and the Borda voting system.","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"criterion = Consistency()\nsystem = Borda()","category":"page"},{"location":"systems/borda/#Compute-Ranking","page":"Borda","title":"Compute Ranking","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The function compute_ranks is used to generate a complete rank ordering of candidates. In the case of ties, candidates will share the same rank value. ","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"compute_ranks(system, rankings)","category":"page"},{"location":"systems/borda/#Evaluate-Winner","page":"Borda","title":"Evaluate Winner","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"We can use the function evaluate_winner to return the winner of the election as a vector. If multiple candidates tie for winner, the vector will contain each winning candidate.","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"systems/borda/#Satisfies","page":"Borda","title":"Satisfies","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The example below determines whether the a voting system is guaranteed to satisfy a given fairness criterion. ","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"satisfies(system, criterion)","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"It is also possible to check whether a system satisfies a given fairness criterion for a specific set of rank choice votes.","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"satisfies(system, criterion, rankings)","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"In the case above, the Borda system satisfies the consistency criterion because it holds in general. However, if a system does not satisify a criterion in general, it may satisfy the criterion in specific cases. ","category":"page"},{"location":"systems/borda/#Count-Violations","page":"Borda","title":"Count Violations","text":"","category":"section"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"The code block below shows how to use count_violations to determine the number of violations of a fairness criterion a given system produces for a specific set of rank choice votes.","category":"page"},{"location":"systems/borda/","page":"Borda","title":"Borda","text":"count_violations(system, criterion, rankings)","category":"page"},{"location":"systems/borda/#References","page":"Borda","title":"References","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"using RankChoiceVoting\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\nsystem = Plurality()","category":"page"},{"location":"systems/plurality/#Plurality","page":"Plurality","title":"Plurality","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"A plurality voting system selects the candidate who has the greatest first position preferences. Formally, let C = c_i_iin mathcalI be a set of n candidates, where mathcalI=1dotsn is the index set. Let r_j(c_i) be a function which counts the number of j^th position preferences for candidate i. The winning candidate is given by ","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"c_m = undersetc_i in Cmathrmargmaxf_1(c_i)","category":"page"},{"location":"systems/plurality/#Example-Usage","page":"Plurality","title":"Example Usage","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"The following examples illustrate some ways in which the plurality system can be used in RankChoiceVoting.jl. To begin, let's generate some synthetic rank choice votes for candidates C = ckmn from 100 voters. ","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"using RankChoiceVoting \ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"Next, let's create objects for the Consistency criterion and the plurality voting system.","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"criterion = Consistency()\nsystem = Plurality()","category":"page"},{"location":"systems/plurality/#Compute-Ranking","page":"Plurality","title":"Compute Ranking","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"The function compute_ranks is used to generate a complete rank ordering of candidates. In the case of ties, candidates will share the same rank value. ","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"compute_ranks(system, rankings)","category":"page"},{"location":"systems/plurality/#Evaluate-Winner","page":"Plurality","title":"Evaluate Winner","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"We can use the function evaluate_winner to return the winner of the election as a vector. If multiple candidates tie for winner, the vector will contain each winning candidate.","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"systems/plurality/#Satisfies","page":"Plurality","title":"Satisfies","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"The example below determines whether the a voting system is guaranteed to satisfy a given fairness criterion. ","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"satisfies(system, criterion)","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"It is also possible to check whether a system satisfies a given fairness criterion for a specific set of rank choice votes.","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"satisfies(system, criterion, rankings)","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"In the case above, the plurality system satisfies the consistency criterion because it holds in general. However, if a system does not satisify a criterion in general, it may satisfy the criterion in specific cases. ","category":"page"},{"location":"systems/plurality/#Count-Violations","page":"Plurality","title":"Count Violations","text":"","category":"section"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"The code block below shows how to use count_violations to determine the number of violations of a fairness criterion a given system produces for a specific set of rank choice votes.","category":"page"},{"location":"systems/plurality/","page":"Plurality","title":"Plurality","text":"count_violations(system, criterion, rankings)","category":"page"},{"location":"systems/plurality/#References","page":"Plurality","title":"References","text":"","category":"section"},{"location":"api/#Criteria","page":"API","title":"Criteria","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RankChoiceVoting]\nOrder   = [:type,:function]\nPrivate = false\nPages = [\"criteria/condorcet_loser.jl\",\n        \"criteria/condorcet_winner.jl\",\n        \"criteria/consistency.jl\",\n        \"criteria/independence_irrelevant_alternatives.jl\",\n        \"criteria/majority.jl\",\n        \"criteria/majority.jl\",\n        \"criteria/monotonicity.jl\",\n        \"criteria/reversalsymmetry.jl\",\n    ]","category":"page"},{"location":"api/#RankChoiceVoting.CondorcetLoser","page":"API","title":"RankChoiceVoting.CondorcetLoser","text":"CondorcetLoser <: Condorcet\n\nA Condorcet loser criterion object. The Condorcet criterion states that a candiate who wins all pairwise elections must also win the election using a given voting system.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetLoser, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::CondorcetLoser, rankings::Ranks; _...)\n\nCounts the number of violations of the Condorcet loser criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetLoser: condorcet criterion object\nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Union{Tuple{T}, Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetLoser, Ranks{T}}} where T","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::CondorcetLoser, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the Condorcet loser criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetLoser: condorcet loser criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.CondorcetWinner","page":"API","title":"RankChoiceVoting.CondorcetWinner","text":"CondorcetWinner <: Criterion\n\nA Condorcet winner criterion object. The Condorcet criterion states that a candiate who wins all pairwise elections must also win the election using a given voting system.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{Any, VotingSystem, CondorcetWinner, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::CondorcetWinner, rankings::Ranks; _...)\n\nCounts the number of violations of the Condorcet for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetWinner: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Union{Tuple{T}, Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetWinner, Ranks{T}}} where T","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::CondorcetWinner, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the Condorcet winner criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetWinner: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Consistency","page":"API","title":"RankChoiceVoting.Consistency","text":"Consistency <: Criterion\n\nA Consistency criterion object. According to the consistency criterion, if the votes are split into disjoint subsets, and  the same candidate wins each subset, the system must select the same winner for the whole set of votes.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Consistency, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Consistency, rankings::Ranks; n_reps=1000, _...)\n\nCounts the number of violations of the consistency criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Consistency: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_reps: number of Monte Carlo simulations to perform \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Consistency, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::Consistency, rankings::Ranks; n_max=1000, _...)\n\nTests whether a voting system satisfies the Consistency criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Consistency: consistency criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_reps: maximum Monte Carlo simulations to perform \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Independence","page":"API","title":"RankChoiceVoting.Independence","text":"Independence <: Criterion\n\nAn object representing the independence of irrelevant alternatives criterion\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Independence, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Independence, rankings::Ranks; _...)\n\nCounts the number of violations of the Independence of Irrelevant alternatives criterion. There are several ways to test this criterion. Currently, it is tested by removing subsets of losing candidates and  testing whether the winner changes. Other methods could add and/or subtract candidates and test whether the  rank order changes. The current method is less strict compared to alternative methods. \n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Independence: Independence criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Independence, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(::Fails, system::VotingSystem, criterion::Independence, rankings::Ranks;  _...)\n\nTests whether a voting system satisfies the Independence of Irrelevant alternatives criterion. There are several ways to test this criterion. Currently, it is tested by removing subsets of losing candidates and  testing whether the winner changes. Other methods could add and/or subtract candidates and test whether the  rank order changes. The current method is less strict compared to alternative methods. \n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Independence: Independence criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Majority","page":"API","title":"RankChoiceVoting.Majority","text":"Majority <: Criterion\n\nAn object for the fairness criterion, majority. A voting system satisfies the majority criterion if it elects the candidate who recieves more than 50% first preferences. \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Majority, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Majority, rankings::Ranks; _...)\n\nCounts the number of violations of the majority criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Majority: majority criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Majority, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::Majority, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the majority criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Majority: majority criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Monotonicity","page":"API","title":"RankChoiceVoting.Monotonicity","text":"Monotonicity <: Criterion\n\nAn object for the fairness criterion monotonicity. A voting system that satisfies the monotonicity criterion cannot elect  a different candidate by increasing votes (without otherwise changing the rank order) of a candidate who would otherwise win. In other words, redistributing more votes to the winner (without otherwise changing the rank order), should not prevent the winner from winning. \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Monotonicity, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criteria::Monotonicity, rankings::Ranks; n_reps=1000, _...)\n\nCounts the number of violations of the monotonicity criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriteria::Monotonicity: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_reps=1000: maximum number of Monte Carlo simulations to perform\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Monotonicity, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criteria::Monotonicity, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the monotonicity criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriteria::Monotonicity: monotonicity criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nmax_reps=1000: maximum number of Monte Carlo simulations to perform while searching \n\nfor a violation\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.ReversalSymmetry","page":"API","title":"RankChoiceVoting.ReversalSymmetry","text":"ReversalSymmetry <: Criterion\n\nAn object for the fairness criterion reversal symmetry. According to the reversal systemetry criterion,  a winner of an election cannot win if each voter's rankings are reversed\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, ReversalSymmetry, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::ReversalSymmetry, rankings::Ranks; _...)\n\nCounts the number of violations of the reversal symmetry criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::ReversalSymmetry: reversal symmetry criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, ReversalSymmetry, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::ReversalSymmetry, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the reversal symmetry criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::ReversalSymmetry: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#Systems","page":"API","title":"Systems","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RankChoiceVoting]\nOrder   = [:type,:function]\nPrivate = false\nPages = [\"systems/Borda.jl\",\n        \"systems/Bucklin.jl\",\n        \"systems/instant_runoff.jl\",\n    ]","category":"page"},{"location":"api/#RankChoiceVoting.Borda","page":"API","title":"RankChoiceVoting.Borda","text":"Borda <: VotingSystem\n\nA Borda count voting system object.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{Borda, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::Borda, rankings::Ranks)\n\nRanks candidates using Borda count system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{Borda, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::Borda, rankings::Ranks)\n\nReturns the id of the winning candiate in Borda count system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Bucklin","page":"API","title":"RankChoiceVoting.Bucklin","text":"Bucklin{T,I<:Integer} <: VotingSystem{T,I}\n\nA Bucklin voting system object.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{Bucklin, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::Bucklin, rankings::Ranks)\n\nRanks candidates using the Bucklin system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{Bucklin, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::Bucklin, rankings::Ranks)\n\nReturns the id of the winning candiate using the Bucklin voting system. \n\nArguments\n\nsystem: a Bucklin voting system object\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.InstantRunOff","page":"API","title":"RankChoiceVoting.InstantRunOff","text":"InstantRunOff{T,I<:Integer} <: VotingSystem{T,I}\n\nAn instant runoff voting system object.\n\nArguments\n\nuranks: a vector of unique rankings. Each ranking is a vector in which index represents rank and value represents candidate id.\ncounts: a vector of frequency counts corresponding to each unique ranking \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{InstantRunOff, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::InstantRunOff, rankings::Ranks)\n\nRanks candidates using the InstantRunOff system. \n\nArguments\n\nsystem: an InstantRunOff voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{InstantRunOff, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::InstantRunOff, rankings::Ranks)\n\nReturns the id of the winning candiate in an instant runoff election. \n\nArguments\n\nsystem: an instant runoff system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"using RankChoiceVoting\nranks = [[:a,:b,:c],[:b,:c,:a],[:b,:a,:c],[:c,:a,:b]]\ncounts = [37,22,12,29]\nrankings = Ranks(counts, ranks)\n","category":"page"},{"location":"criteria/monotonicity/#Monotonicity","page":"Monotonicity","title":"Monotonicity","text":"","category":"section"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"According to the monotonicity criterion, a winning candidate should not lose if some voters switch preference from a losing candidate to the winning candidate (without changing the rank order of the other candidates). We will demonstrate a violation of the monotonicity criterion with an example below using the instant runoff voting system. To begin, lets create an object for the instant runoff voting system. ","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"using RankChoiceVoting\nsystem = InstantRunOff()","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"Next, lets generate a preference profile for n=100 candidates:","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"ranks = [[:a,:b,:c],[:b,:c,:a],[:b,:a,:c],[:c,:a,:b]]\ncounts = [37,22,12,29]\nrankings1 = Ranks(counts, ranks)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"The code block below uses evaluate_winner to determine the winner of the election.","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"evaluate_winner(system, rankings1)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"In this case, candidate a won the election. Now suppose 10 voters who ranked bac swiched their preference betwen canidates a and b, resulting in a new preference profile:","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"ranks = [[:a,:b,:c],[:b,:c,:a],[:b,:a,:c],[:c,:a,:b]]\ncounts = [47,22,2,29]\nrankings2 = Ranks(counts, ranks)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"In other words, support for the winning candidate a increased. After updating the preference profile, the winner is no longer a:","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"evaluate_winner(system, rankings2)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"Thus, motonicity was violated. Increasing support for the winning candidate resulted in a lose for the candidate who initially won with less support. ","category":"page"},{"location":"criteria/monotonicity/#Usage","page":"Monotonicity","title":"Usage","text":"","category":"section"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"The following example illustrates how to evaluate the instant runoff voting system with respect to the monotonicity criterion. The code block below illustrates how to create a Monotonicity criterion object.","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"using RankChoiceVoting\ncriterion = Monotonicity()","category":"page"},{"location":"criteria/monotonicity/#Satisfies","page":"Monotonicity","title":"Satisfies","text":"","category":"section"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"We can see which systems are guaranteed to satisfy the monotonicity criterion by calling satisfies with the majority criterion object. ","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"satisfies(criterion)","category":"page"},{"location":"criteria/monotonicity/#Example","page":"Monotonicity","title":"Example","text":"","category":"section"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"Let's  check whether mutual majority is violated in a different example. In the code block below, we will define a preference profile of n=100 voters for m=4 candidates. ","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"ranks = [[:a,:b,:c],[:b,:c,:a],[:b,:a,:c],[:c,:a,:b]]\ncounts = [37,22,12,29]\nrankings = Ranks(counts, ranks)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"Now, create an Borda count voting system object:","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"system = Borda()","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"In the code block below, we can determine the winner of the election with the function evaluate_winner as follows:","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"In the next code block, we will use the function satisifies to determine whether the Borda count system complies with the mutual majority criterion for the preference profile above.","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"criterion = MutualMajority()\nsatisfies(system, criterion, rankings)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"which yields false for this example. To explore this result in more detail, we can use get_majority_set to list the candidates in the mutual majority set B. ","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"get_majority_set(rankings)","category":"page"},{"location":"criteria/monotonicity/","page":"Monotonicity","title":"Monotonicity","text":"In this simple example, B = s, and the winning candidate t notin B.","category":"page"},{"location":"criteria/monotonicity/#References","page":"Monotonicity","title":"References","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"using RankChoiceVoting\ndata = [[:a,:b,:c] for _ ∈ 1:4]\npush!(data, [[:b,:c,:a] for _ ∈ 1:3]...)\npush!(data, [[:c,:a,:b] for _ ∈ 1:2]...)\nrankings = Ranks(data)","category":"page"},{"location":"criteria/reversalsymmetry/#Reversal-Symmetry","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"According to the reversal symmetry criterion,  if a rank choice voting system selects candidate c as a winner, it cannot select c as a winner after reverse ranking the votes.  ","category":"page"},{"location":"criteria/reversalsymmetry/#Usage","page":"Reversal Symmetry","title":"Usage","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"using RankChoiceVoting\ncriterion = ReversalSymmetry()","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"The code block below illustrates how to create a Majority criterion object.","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"using RankChoiceVoting\ncriterion = ReversalSymmetry()","category":"page"},{"location":"criteria/reversalsymmetry/#Satisfies","page":"Reversal Symmetry","title":"Satisfies","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"We can see which systems are guaranteed to satisfy the reversal symmetry criterion by calling satisfies with the majority criterion object. ","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"satisfies(criterion)","category":"page"},{"location":"criteria/reversalsymmetry/#Example","page":"Reversal Symmetry","title":"Example","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"The following example demonstrates how to use RankChoiceVoting.jl to test whether the instant runoff voting system violates the reveral symmetry criterion in a specific example. ","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"Let's use RankChoiceVoting.jl to check whether reversal symmetry is violated in this example. ","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"Next, create the rankings in the first table above:","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"ranks = [[:a,:b,:c],[:b,:c,:a],[:c,:a,:b]]\ncounts = [4,3,2]\nrankings = Ranks(counts, ranks)","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"Now, create an instant runoff voting system object:","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"system = InstantRunOff()","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"The winner of the election under an instant runoff voting system can be determined with the function  evaluate_winner as follows:","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"In agreement with the worked example above, the result is candidate a. In RankChoiceVoting.jl, the function satisfies determines whether a voting system complies with a given criterion for the provided rankings. This can be achieved with the following code:","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"criterion = ReversalSymmetry()\nviolations = satisfies(system, criterion, rankings)","category":"page"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"which yields true for this example.  ","category":"page"},{"location":"criteria/reversalsymmetry/#References","page":"Reversal Symmetry","title":"References","text":"","category":"section"},{"location":"criteria/reversalsymmetry/","page":"Reversal Symmetry","title":"Reversal Symmetry","text":"lô Gueye, A. (2014). Failures of reversal symmetry under two common voting rules. Economics Bulletin, 34(3), 1970-1975.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nWork in progress","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a framework for simulating and evaluating rank choice voting systems. Rank choice voting systems allow voters to order candidates according to preference rather than providing a single selection of the most preferred candidate. Each rank choice voting system specifies a rule for aggregating individual rankings into a societial ranking from which a winner is selected. Importantly, the rules can provide different election outcomes. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interestingly, Arrow's impossibility theorem demonstrates that it is impossible to design a rank choice voting system that can satisfy a set of fairness criteria in all possible elections. What this means is that every rank choice voting system is flawed to some degree, and may lead to undesirable behavior in some situations. Although insightful, many interesting questions remain unanswered by Arrow's impossibility theorem. For example, how prevalent are violations of fairness critera, and under what conditions are they violated? This package is designed to help answer questions of this nature.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the REPL, type ] to enter package mode and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/itsdfish/RankChoiceVoting.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"to add RankChoiceVoting.jl to your environment.","category":"page"},{"location":"#API-Overview","page":"Home","title":"API Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The API for RankChoiceVoting.jl is summarized below. For more details, use the navigation panel on the left.","category":"page"},{"location":"#Type-System","page":"Home","title":"Type System","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The API for RankChoiceVoting consists of three sets of types: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ranks: a rank choice data object\nsystems: a set of rules for transforming individual rank choice votes into a societal ranking\ncriteria: fairness criteria against which a voting system is evaluated ","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"compute_ranks: transforms a set of individual rank choices into a societal ranking\nevaluate_winner: returns the winner(s) of an election\nsatisfies: evaluates whether a system satisfies a given criterion\ncount_violations: counts the number of violations of a criterion in a given set of rank choice votes","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below, we will showcase some common uses of RankChoiceVoting.jl using an example based on the Borda count system.","category":"page"},{"location":"#Rank-Choice-Votes","page":"Home","title":"Rank Choice Votes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code block below generates synthetic rank choice votes of candidates C = ckmn from 100 voters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RankChoiceVoting\n\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)\n\nsystem = Borda()","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RankChoiceVoting\n\ndata = [[:m,:n,:c,:k],[:n,:m,:c,:k],[:c,:k,:n,:m],[:k,:c,:n,:m]]\ncounts = [42,26,15,17]\nrankings = Ranks(counts, data)","category":"page"},{"location":"#Select-Winner","page":"Home","title":"Select Winner","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We can use the function evaluate_winner to determine the winner of the election.","category":"page"},{"location":"","page":"Home","title":"Home","text":"system = Borda()\nevaluate_winner(system, rankings)","category":"page"},{"location":"#Compute-Ranks","page":"Home","title":"Compute Ranks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Similarly, we can determine the full ranking with the function compute_ranks:","category":"page"},{"location":"","page":"Home","title":"Home","text":"compute_ranks(system, rankings)","category":"page"},{"location":"#Fairness-Criteria","page":"Home","title":"Fairness Criteria","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code block below shows how to use the satisfies function to determine which criteria the Borda voting system satisfies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RankChoiceVoting\nsystem = Borda()\nsatisfies(system)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, it is possible to pass a criterion to the function satisfies to determine which voting systems satisfy the criterion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RankChoiceVoting\ncriterion = Consistency()\nsatisfies(criterion)","category":"page"},{"location":"voting_data/#Voting-Data","page":"Rank Choice Votes","title":"Voting Data","text":"","category":"section"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"using RankChoiceVoting\ndata = [[:a,:b,:c],[:a,:c,:b],[:a,:c,:b],[:b,:a,:c]]","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"Rank choice voting data is compressed and stored efficiently in a object type called Ranks, which has two fields:","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"uranks: a vector of unique rank choice vectors\ncounts: a vector of counts corresponding to the number of votes for each unique rank choice vector","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"Below, we provide two examples for converting rank choice data into the appropriate format for a Ranks data object.","category":"page"},{"location":"voting_data/#Example-1","page":"Rank Choice Votes","title":"Example 1","text":"","category":"section"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"In this first example, the rank choice votes of each individual is contained in a vector. All of the individual vectors are wrapped in a larger vector. Here is a simple case using four hypothetical individuals:","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"using RankChoiceVoting\ndata = [[:a,:b,:c],[:a,:c,:b],[:a,:c,:b],[:b,:a,:c]]","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"The output above shows that the first and fourth individuals have unique rank choices, whereas the second and third individuals have the same rank choices. We can pass the data vector to the Ranks construct to create a more efficent data representation: ","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"rankings = Ranks(data)","category":"page"},{"location":"voting_data/#Example-2","page":"Rank Choice Votes","title":"Example 2","text":"","category":"section"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"Unlike the example above, where ranks for each individual was provided, this second example shows how construct a Rank data object from pre-processed data. The code block shows the pre-processed data as a unique vector of ranks, unique_ranks, and the associated counts in a vector called counts.","category":"page"},{"location":"voting_data/","page":"Rank Choice Votes","title":"Rank Choice Votes","text":"using RankChoiceVoting \nunique_ranks = [[:a,:b,:c],[:a,:c,:b],[:b,:a,:c]]\ncounts = [1,2,1]\nrankings = Ranks(counts, unique_ranks)","category":"page"}]
}
