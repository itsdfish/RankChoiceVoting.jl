var documenterSearchIndex = {"docs":
[{"location":"api/#Criteria","page":"API","title":"Criteria","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RankChoiceVoting]\nOrder   = [:type,:function]\nPrivate = false\nPages = [\"criteria/condorcet_loser.jl\",\n        \"criteria/condorcet_winner.jl\",\n        \"criteria/consistency.jl\",\n        \"criteria/independence_irrelevant_alternatives.jl\",\n        \"criteria/majority.jl\",\n        \"criteria/majority.jl\",\n        \"criteria/monotonicity.jl\",\n        \"criteria/reversalsymmetry.jl\",\n    ]","category":"page"},{"location":"api/#RankChoiceVoting.CondorcetLoser","page":"API","title":"RankChoiceVoting.CondorcetLoser","text":"CondorcetLoser <: Condorcet\n\nA Condorcet loser criterion object. The Condorcet criterion states that a candiate who wins all pairwise elections must also win the election using a given voting system.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetLoser, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::CondorcetLoser, rankings::Ranks; _...)\n\nCounts the number of violations of the Condorcet loser criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetLoser: condorcet criterion object\nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Union{Tuple{T}, Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetLoser, Ranks{T}}} where T","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::CondorcetLoser, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the Condorcet loser criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetLoser: condorcet loser criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.CondorcetWinner","page":"API","title":"RankChoiceVoting.CondorcetWinner","text":"CondorcetWinner <: Criterion\n\nA Condorcet winner criterion object. The Condorcet criterion states that a candiate who wins all pairwise elections must also win the election using a given voting system.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{Any, VotingSystem, CondorcetWinner, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::CondorcetWinner, rankings::Ranks; _...)\n\nCounts the number of violations of the Condorcet for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetWinner: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Union{Tuple{T}, Tuple{RankChoiceVoting.Fails, VotingSystem, CondorcetWinner, Ranks{T}}} where T","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::CondorcetWinner, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the Condorcet winner criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::CondorcetWinner: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Consistency","page":"API","title":"RankChoiceVoting.Consistency","text":"Consistency <: Criterion\n\nA Consistency criterion object. According to the consistency criterion, if the votes are split into disjoint subsets, and  the same candidate wins each subset, the system must select the same winner for the whole set of votes.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Consistency, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Consistency, rankings::Ranks; n_rep=1000, _...)\n\nCounts the number of violations of the consistency criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Consistency: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_rep: number of Monte Carlo simulations to perform \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Consistency, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::Consistency, rankings::Ranks; n_max=1000, _...)\n\nTests whether a voting system satisfies the Consistency criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Consistency: consistency criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_max: maximum Monte Carlo simulations to perform \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Independence","page":"API","title":"RankChoiceVoting.Independence","text":"Independence <: Criterion\n\nA Consistency criterion object. According to the consistency criterion, if the votes are split into disjoint subsets, and  the same candidate wins each subset, the system must select the same winner for the whole set of votes.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Independence, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Independence, rankings::Ranks; _...)\n\nCounts the number of violations of the Independence of Irrelevant alternatives criterion. There are several ways to test this criterion. Currently, it is tested by removing subsets of losing candidates and  testing whether the winner changes. Other methods could add and/or subtract candidates and test whether the  rank order changes. The current method is less strict compared to alternative methods. \n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Independence: Independence criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Independence, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(::Fails, system::VotingSystem, criterion::Independence, rankings::Ranks;  _...)\n\nTests whether a voting system satisfies the Independence of Irrelevant alternatives criterion. There are several ways to test this criterion. Currently, it is tested by removing subsets of losing candidates and  testing whether the winner changes. Other methods could add and/or subtract candidates and test whether the  rank order changes. The current method is less strict compared to alternative methods. \n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Independence: Independence criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Majority","page":"API","title":"RankChoiceVoting.Majority","text":"Majority <: Criterion\n\nAn object for the fairness criterion, majority. A voting system satisfies the majority criterion if it elects the candidate who recieves more than 50% first preferences. \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Majority, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::Majority, rankings::Ranks; _...)\n\nCounts the number of violations of the majority criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Majority: majority criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Majority, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::Majority, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the majority criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::Majority: majority criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Monotonicity","page":"API","title":"RankChoiceVoting.Monotonicity","text":"Monotonicity <: Criterion\n\nAn object for the fairness criterion monotonicity. A voting system that satisfies the monotonicity criterion cannot elect  a different candidate by increasing votes (without otherwise changing the rank order) of a candidate who would otherwise win. In other words, redistributing more votes to the winner (without otherwise changing the rank order), should not prevent the winner from winning. \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, Monotonicity, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criteria::Monotonicity, rankings::Ranks; n_reps=1000, _...)\n\nCounts the number of violations of the monotonicity criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriteria::Monotonicity: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nn_reps=1000: maximum number of Monte Carlo simulations to perform\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, Monotonicity, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criteria::Monotonicity, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the monotonicity criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriteria::Monotonicity: monotonicity criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\nKeywords\n\nmax_reps=1000: maximum number of Monte Carlo simulations to perform while searching \n\nfor a violation\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.ReversalSymmetry","page":"API","title":"RankChoiceVoting.ReversalSymmetry","text":"ReversalSymmetry <: Criterion\n\nAn object for the fairness criterion reversal symmetry. According to the reversal systemetry criterion,  a winner of an election cannot win if each voter's rankings are reversed\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.count_violations-Tuple{RankChoiceVoting.Fails, VotingSystem, ReversalSymmetry, Ranks}","page":"API","title":"RankChoiceVoting.count_violations","text":"count_violations(system::VotingSystem, criterion::ReversalSymmetry, rankings::Ranks; _...)\n\nCounts the number of violations of the reversal symmetry criterion for a given voting system.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::ReversalSymmetry: reversal symmetry criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.satisfies-Tuple{RankChoiceVoting.Fails, VotingSystem, ReversalSymmetry, Ranks}","page":"API","title":"RankChoiceVoting.satisfies","text":"satisfies(system::VotingSystem, criterion::ReversalSymmetry, rankings::Ranks; _...)\n\nTests whether a voting system satisfies the reversal symmetry criterion.\n\nArguments\n\nsystem::VotingSystem: a voting system object\ncriterion::ReversalSymmetry: condorcet criterion object \nrankings::Ranks: a rank choice voting object consisting of rank counts and unique ranks \n\n\n\n\n\n","category":"method"},{"location":"api/#Systems","page":"API","title":"Systems","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RankChoiceVoting]\nOrder   = [:type,:function]\nPrivate = false\nPages = [\"systems/Borda.jl\",\n        \"systems/Bucklin.jl\",\n        \"systems/instant_runoff.jl\",\n    ]","category":"page"},{"location":"api/#RankChoiceVoting.Borda","page":"API","title":"RankChoiceVoting.Borda","text":"Borda <: VotingSystem\n\nA Borda count voting system object.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{Borda, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::Borda, rankings::Ranks)\n\nRanks candidates using Borda count system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{Borda, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::Borda, rankings::Ranks)\n\nReturns the id of the winning candiate in Borda count system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.Bucklin","page":"API","title":"RankChoiceVoting.Bucklin","text":"Bucklin{T,I<:Integer} <: VotingSystem{T,I}\n\nA Bucklin voting system object.\n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{Bucklin, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::Bucklin, rankings::Ranks)\n\nRanks candidates using the Bucklin system. \n\nArguments\n\nsystem: a Borda voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{Bucklin, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::Bucklin, rankings::Ranks)\n\nReturns the id of the winning candiate using the Bucklin voting system. \n\nArguments\n\nsystem: a Bucklin voting system object\n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.InstantRunOff","page":"API","title":"RankChoiceVoting.InstantRunOff","text":"InstantRunOff{T,I<:Integer} <: VotingSystem{T,I}\n\nAn instant runoff voting system object.\n\nArguments\n\nuranks: a vector of unique rankings. Each ranking is a vector in which index represents rank and value represents candidate id.\ncounts: a vector of frequency counts corresponding to each unique ranking \n\n\n\n\n\n","category":"type"},{"location":"api/#RankChoiceVoting.compute_ranks-Tuple{InstantRunOff, Ranks}","page":"API","title":"RankChoiceVoting.compute_ranks","text":"compute_ranks(system::InstantRunOff, rankings::Ranks)\n\nRanks candidates using the InstantRunOff system. \n\nArguments\n\nsystem: an InstantRunOff voting system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"api/#RankChoiceVoting.evaluate_winner-Tuple{InstantRunOff, Ranks}","page":"API","title":"RankChoiceVoting.evaluate_winner","text":"evaluate_winner(system::InstantRunOff, rankings::Ranks)\n\nReturns the id of the winning candiate in an instant runoff election. \n\nArguments\n\nsystem: an instant runoff system object\nrankings::Ranks: an object containing counts and unique rank orders \n\n\n\n\n\n","category":"method"},{"location":"systems/systems/#Majority-Criterion","page":"system","title":"Majority Criterion","text":"","category":"section"},{"location":"systems/systems/#Example","page":"system","title":"Example","text":"","category":"section"},{"location":"systems/systems/","page":"system","title":"system","text":"using RankChoiceVoting","category":"page"},{"location":"systems/systems/","page":"system","title":"system","text":"using RankChoiceVoting \n\nrankings = [[:m,:n,:c,:k] for _ ∈ 1:42]\npush!(rankings, [[:n,:m,:c,:k] for _ ∈ 1:26]...)\npush!(rankings, [[:c,:k,:n,:m] for _ ∈ 1:15]...)\npush!(rankings, [[:k,:c,:n,:m] for _ ∈ 1:17]...)\n\nsystem = Borda(rankings)","category":"page"},{"location":"systems/systems/#Compute-Ranking","page":"system","title":"Compute Ranking","text":"","category":"section"},{"location":"systems/systems/","page":"system","title":"system","text":"compute_ranks(system)","category":"page"},{"location":"systems/systems/#Evaluate-Winner","page":"system","title":"Evaluate Winner","text":"","category":"section"},{"location":"systems/systems/","page":"system","title":"system","text":"evaluate_winner(system)","category":"page"},{"location":"systems/systems/#Satisfies","page":"system","title":"Satisfies","text":"","category":"section"},{"location":"systems/systems/","page":"system","title":"system","text":"evaluate_winner(system)","category":"page"},{"location":"systems/systems/","page":"system","title":"system","text":"evaluate_winner(system, rankings)","category":"page"},{"location":"systems/systems/#Count-Violations","page":"system","title":"Count Violations","text":"","category":"section"},{"location":"systems/systems/","page":"system","title":"system","text":"count_violations(system)","category":"page"},{"location":"systems/systems/#References","page":"system","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nWork in progress","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a framework for simulating and evaluating rank choice voting systems. Rank choice voting systems allow voters to order candidates according to preference rather than providing a single selection of the most preferred candidate. Each rank choice voting system specifies a rule for aggregating individual rankings into a societial ranking from which a winner is selected. Importantly, the rules can provide different election outcomes. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interestingly, Arrow's impossibility theorem demonstrates that it is impossible to design a rank choice voting system that can satisfy a set of fairness criteria in all possible elections. What this means is that every rank choice voting system is flawed to some degree, and may lead to undesirable behavior in some situations. Although insightful, many interesting questions remain unanswered by Arrow's impossibility theorem. For example, how prevalent are violations of fairness critera, and under what conditions are they violated? This package is designed to help answer questions of this nature.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In the REPL, type ] to enter package mode and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/itsdfish/RankChoiceVoting.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"to add RankChoiceVoting.jl to your environment.","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In this quick example, we will plot the histogram for the Racing Diffusion Model (RDM). Note that you will need to install SequentialSamplingModels in order for the example to work.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using RankChoiceVoting\n\nrankings = [[:m,:n,:c,:k] for _ ∈ 1:42]\npush!(rankings, [[:n,:m,:c,:k] for _ ∈ 1:26]...)\npush!(rankings, [[:c,:k,:n,:m] for _ ∈ 1:15]...)\npush!(rankings, [[:k,:c,:n,:m] for _ ∈ 1:17]...)\n\nsystem = Borda(rankings)\n\nevaluate_winner(system)","category":"page"},{"location":"criteria/majority/#Majority-Criterion","page":"criteria","title":"Majority Criterion","text":"","category":"section"},{"location":"criteria/majority/#Example","page":"criteria","title":"Example","text":"","category":"section"},{"location":"criteria/majority/","page":"criteria","title":"criteria","text":"using RankChoiceVoting\ncriterion = Majority()","category":"page"},{"location":"criteria/majority/","page":"criteria","title":"criteria","text":"using RankChoiceVoting\ncriterion = Majority()","category":"page"},{"location":"criteria/majority/#Satisfies","page":"criteria","title":"Satisfies","text":"","category":"section"},{"location":"criteria/majority/","page":"criteria","title":"criteria","text":"satisfies(criterion)","category":"page"},{"location":"criteria/majority/#References","page":"criteria","title":"References","text":"","category":"section"}]
}
